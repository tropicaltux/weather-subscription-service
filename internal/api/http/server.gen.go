// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for SubscriptionFrequency.
const (
	SubscriptionFrequencyDaily  SubscriptionFrequency = "daily"
	SubscriptionFrequencyHourly SubscriptionFrequency = "hourly"
)

// Defines values for SubscribeFormdataBodyFrequency.
const (
	SubscribeFormdataBodyFrequencyDaily  SubscribeFormdataBodyFrequency = "daily"
	SubscribeFormdataBodyFrequencyHourly SubscribeFormdataBodyFrequency = "hourly"
)

// Error Standard error response
type Error struct {
	// Message Human-readable error message
	Message string `json:"message"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	// City City for weather updates
	City string `json:"city"`

	// Confirmed Whether the subscription is confirmed
	Confirmed *bool `json:"confirmed,omitempty"`

	// Email Email address
	Email string `json:"email"`

	// Frequency Frequency of updates
	Frequency SubscriptionFrequency `json:"frequency"`
}

// SubscriptionFrequency Frequency of updates
type SubscriptionFrequency string

// Weather defines model for Weather.
type Weather struct {
	// Description Weather description
	Description *string `json:"description,omitempty"`

	// Humidity Current humidity percentage
	Humidity *float32 `json:"humidity,omitempty"`

	// Temperature Current temperature
	Temperature *float32 `json:"temperature,omitempty"`
}

// SubscribeFormdataBody defines parameters for Subscribe.
type SubscribeFormdataBody struct {
	// City City for weather updates
	City string `form:"city" json:"city"`

	// Email Email address to subscribe
	Email string `form:"email" json:"email"`

	// Frequency Frequency of updates (hourly or daily)
	Frequency SubscribeFormdataBodyFrequency `form:"frequency" json:"frequency"`
}

// SubscribeFormdataBodyFrequency defines parameters for Subscribe.
type SubscribeFormdataBodyFrequency string

// GetWeatherParams defines parameters for GetWeather.
type GetWeatherParams struct {
	// City City name for weather forecast
	City string `form:"city" json:"city"`
}

// SubscribeFormdataRequestBody defines body for Subscribe for application/x-www-form-urlencoded ContentType.
type SubscribeFormdataRequestBody SubscribeFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirm email subscription
	// (GET /confirm/{token})
	ConfirmSubscription(c *gin.Context, token string)
	// Subscribe to weather updates
	// (POST /subscribe)
	Subscribe(c *gin.Context)
	// Unsubscribe from weather updates
	// (GET /unsubscribe/{token})
	Unsubscribe(c *gin.Context, token string)
	// Get current weather for a city
	// (GET /weather)
	GetWeather(c *gin.Context, params GetWeatherParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ConfirmSubscription operation middleware
func (siw *ServerInterfaceWrapper) ConfirmSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmSubscription(c, token)
}

// Subscribe operation middleware
func (siw *ServerInterfaceWrapper) Subscribe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Subscribe(c)
}

// Unsubscribe operation middleware
func (siw *ServerInterfaceWrapper) Unsubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Unsubscribe(c, token)
}

// GetWeather operation middleware
func (siw *ServerInterfaceWrapper) GetWeather(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWeatherParams

	// ------------- Required query parameter "city" -------------

	if paramValue := c.Query("city"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument city is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "city", c.Request.URL.Query(), &params.City)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter city: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWeather(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/confirm/:token", wrapper.ConfirmSubscription)
	router.POST(options.BaseURL+"/subscribe", wrapper.Subscribe)
	router.GET(options.BaseURL+"/unsubscribe/:token", wrapper.Unsubscribe)
	router.GET(options.BaseURL+"/weather", wrapper.GetWeather)
}

type ConfirmSubscriptionRequestObject struct {
	Token string `json:"token"`
}

type ConfirmSubscriptionResponseObject interface {
	VisitConfirmSubscriptionResponse(w http.ResponseWriter) error
}

type ConfirmSubscription200Response struct {
}

func (response ConfirmSubscription200Response) VisitConfirmSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ConfirmSubscription400JSONResponse Error

func (response ConfirmSubscription400JSONResponse) VisitConfirmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmSubscription404JSONResponse Error

func (response ConfirmSubscription404JSONResponse) VisitConfirmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeRequestObject struct {
	Body *SubscribeFormdataRequestBody
}

type SubscribeResponseObject interface {
	VisitSubscribeResponse(w http.ResponseWriter) error
}

type Subscribe200Response struct {
}

func (response Subscribe200Response) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Subscribe400JSONResponse Error

func (response Subscribe400JSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Subscribe409JSONResponse Error

func (response Subscribe409JSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UnsubscribeRequestObject struct {
	Token string `json:"token"`
}

type UnsubscribeResponseObject interface {
	VisitUnsubscribeResponse(w http.ResponseWriter) error
}

type Unsubscribe200Response struct {
}

func (response Unsubscribe200Response) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Unsubscribe400JSONResponse Error

func (response Unsubscribe400JSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Unsubscribe404JSONResponse Error

func (response Unsubscribe404JSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWeatherRequestObject struct {
	Params GetWeatherParams
}

type GetWeatherResponseObject interface {
	VisitGetWeatherResponse(w http.ResponseWriter) error
}

type GetWeather200JSONResponse struct {
	// Description Weather description
	Description *string `json:"description,omitempty"`

	// Humidity Current humidity percentage
	Humidity *float32 `json:"humidity,omitempty"`

	// Temperature Current temperature
	Temperature *float32 `json:"temperature,omitempty"`
}

func (response GetWeather200JSONResponse) VisitGetWeatherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWeather400JSONResponse Error

func (response GetWeather400JSONResponse) VisitGetWeatherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWeather404JSONResponse Error

func (response GetWeather404JSONResponse) VisitGetWeatherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Confirm email subscription
	// (GET /confirm/{token})
	ConfirmSubscription(ctx context.Context, request ConfirmSubscriptionRequestObject) (ConfirmSubscriptionResponseObject, error)
	// Subscribe to weather updates
	// (POST /subscribe)
	Subscribe(ctx context.Context, request SubscribeRequestObject) (SubscribeResponseObject, error)
	// Unsubscribe from weather updates
	// (GET /unsubscribe/{token})
	Unsubscribe(ctx context.Context, request UnsubscribeRequestObject) (UnsubscribeResponseObject, error)
	// Get current weather for a city
	// (GET /weather)
	GetWeather(ctx context.Context, request GetWeatherRequestObject) (GetWeatherResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ConfirmSubscription operation middleware
func (sh *strictHandler) ConfirmSubscription(ctx *gin.Context, token string) {
	var request ConfirmSubscriptionRequestObject

	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmSubscription(ctx, request.(ConfirmSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ConfirmSubscriptionResponseObject); ok {
		if err := validResponse.VisitConfirmSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Subscribe operation middleware
func (sh *strictHandler) Subscribe(ctx *gin.Context) {
	var request SubscribeRequestObject

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SubscribeFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Subscribe(ctx, request.(SubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeResponseObject); ok {
		if err := validResponse.VisitSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Unsubscribe operation middleware
func (sh *strictHandler) Unsubscribe(ctx *gin.Context, token string) {
	var request UnsubscribeRequestObject

	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Unsubscribe(ctx, request.(UnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Unsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeResponseObject); ok {
		if err := validResponse.VisitUnsubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWeather operation middleware
func (sh *strictHandler) GetWeather(ctx *gin.Context, params GetWeatherParams) {
	var request GetWeatherRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWeather(ctx, request.(GetWeatherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWeather")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWeatherResponseObject); ok {
		if err := validResponse.VisitGetWeatherResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
